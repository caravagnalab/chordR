nrow = 2,
heights = c(1,2),
align = "v")
top_genes = y %>% group_by(gene, HGVSp_Short) %>%
summarise(n=n()) %>%
unique() %>%
arrange(desc(n)) %>%
head(50)
top_genes
plt_hot_freq = y %>%
left_join(top_genes, by = c("gene", "HGVSp_Short")) %>%
filter(gene %in% top_genes$gene, HGVSp_Short %in% top_genes$HGVSp_Short) %>%
mutate(hotspot = paste(gene,HGVSp_Short, sep = ":")) %>%
ggplot(aes(y = hotspot, x = CANCER_TYPE))+
geom_tile(aes(fill = n))+
scale_fill_viridis_c(direction = -1, trans = "log10") +
CNAqc:::my_ggplot_theme() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right")+
guides(fill = guide_colorbar(NULL, barwidth = unit(.3, 'cm')), nrow = 1)
ggpubr::ggarrange(plotlist = list(
plt_top_g_freq + theme(axis.text.x = element_blank()),
plt_hot_freq
),
nrow = 2,
heights = c(1,4),
align = "v")
figure= ggpubr::ggarrange(plotlist = list(
plt_top_g_freq + theme(axis.text.x = element_blank()),
plt_hot_freq
),
nrow = 2,
heights = c(1,4),
align = "v")
plt_hot_freq
plt_hot_freq = y %>%
left_join(top_genes, by = c("gene", "HGVSp_Short")) %>%
filter(gene %in% top_genes$gene, HGVSp_Short %in% top_genes$HGVSp_Short) %>%
mutate(hotspot = paste(gene,HGVSp_Short, sep = ":")) %>%
ggplot(aes(y = hotspot, x = CANCER_TYPE))+
geom_tile(aes(fill = n))+
scale_fill_distiller(palette = 'Spectral') +
# scale_fill_viridis_c(direction = -1, trans = "log10") +
CNAqc:::my_ggplot_theme() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right")+
guides(fill = guide_colorbar(NULL, barwidth = unit(.3, 'cm')), nrow = 1)
plt_hot_freq
plt_hot_freq = y %>%
left_join(top_genes, by = c("gene", "HGVSp_Short")) %>%
filter(gene %in% top_genes$gene, HGVSp_Short %in% top_genes$HGVSp_Short) %>%
mutate(hotspot = paste(gene,HGVSp_Short, sep = ":")) %>%
ggplot(aes(y = hotspot, x = CANCER_TYPE))+
geom_tile(aes(fill = n))+
scale_fill_distiller(palette = 'Spectral') +
scale_y_continuous(breaks = scales::pretty_breaks(8)) +
# scale_fill_viridis_c(direction = -1, trans = "log10") +
CNAqc:::my_ggplot_theme() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right")+
guides(fill = guide_colorbar(NULL, barwidth = unit(.3, 'cm')), nrow = 1)
plt_hot_freq = y %>%
left_join(top_genes, by = c("gene", "HGVSp_Short")) %>%
filter(gene %in% top_genes$gene, HGVSp_Short %in% top_genes$HGVSp_Short) %>%
mutate(hotspot = paste(gene,HGVSp_Short, sep = ":")) %>%
ggplot(aes(y = hotspot, x = CANCER_TYPE))+
geom_tile(aes(fill = n))+
scale_fill_distiller(palette = 'Spectral') +
# scale_y_continuous(breaks = scales::pretty_breaks(8)) +
# scale_fill_viridis_c(direction = -1, trans = "log10") +
CNAqc:::my_ggplot_theme() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right")+
guides(fill = guide_colorbar(NULL, barwidth = unit(.3, 'cm')), nrow = 1)
plt_hot_freq
RColorBrewer::brewer.pal(4, "Spectral")
plt_hot_freq = y %>%
left_join(top_genes, by = c("gene", "HGVSp_Short")) %>%
filter(gene %in% top_genes$gene, HGVSp_Short %in% top_genes$HGVSp_Short) %>%
mutate(hotspot = paste(gene,HGVSp_Short, sep = ":")) %>%
ggplot(aes(y = hotspot, x = CANCER_TYPE))+
geom_tile(aes(fill = n))+
scale_fill_manual(values = colorRamp(RColorBrewer::brewer.pal(4, "Spectral"))(10))
plt_hot_freq
plt_hot_freq = y %>%
left_join(top_genes, by = c("gene", "HGVSp_Short")) %>%
filter(gene %in% top_genes$gene, HGVSp_Short %in% top_genes$HGVSp_Short) %>%
mutate(hotspot = paste(gene,HGVSp_Short, sep = ":")) %>%
ggplot(aes(y = hotspot, x = CANCER_TYPE))+
geom_tile(aes(fill = n))+
# scale_fill_manual(values = colorRamp(RColorBrewer::brewer.pal(4, "Spectral"))(10))
scale_fill_distiller(palette = 'Spectral') +
# scale_y_continuous(breaks = scales::pretty_breaks(8)) +
# scale_fill_viridis_c(direction = -1, trans = "log10") +
CNAqc:::my_ggplot_theme() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right")+
guides(fill = guide_colorbar(NULL, barwidth = unit(.3, 'cm')), nrow = 1)
plt_hot_freq
top_genes = y %>% group_by(gene, HGVSp_Short) %>%
summarise(n=n()) %>%
unique() %>%
arrange(desc(n)) %>%
head(100)
plt_hot_freq = y %>%
left_join(top_genes, by = c("gene", "HGVSp_Short")) %>%
filter(gene %in% top_genes$gene, HGVSp_Short %in% top_genes$HGVSp_Short) %>%
mutate(hotspot = paste(gene,HGVSp_Short, sep = ":")) %>%
ggplot(aes(y = hotspot, x = CANCER_TYPE))+
geom_tile(aes(fill = n))+
# scale_fill_manual(values = colorRamp(RColorBrewer::brewer.pal(4, "Spectral"))(10))
scale_fill_distiller(palette = 'Spectral') +
# scale_y_continuous(breaks = scales::pretty_breaks(8)) +
# scale_fill_viridis_c(direction = -1, trans = "log10") +
CNAqc:::my_ggplot_theme() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right")+
guides(fill = guide_colorbar(NULL, barwidth = unit(.3, 'cm')), nrow = 1)
figure= ggpubr::ggarrange(plotlist = list(
plt_top_g_freq + theme(axis.text.x = element_blank()),
plt_hot_freq
),
nrow = 2,
heights = c(1,4),
align = "v")
ggsave("~/Desktop/a.png", figure, width = 10, height = 16, units = 'inches')
ggsave("~/Desktop/a.png", figure, width = 10, height = 16, units = 'in')
ggsave("~/Desktop/a.png", figure, width = 10, height = 18, units = 'in')
ggsave("~/Desktop/a.png", figure, width = 10, height = 22, units = 'in')
y$gene %>% unique()
x = readRDS(file = "./data/msk_met_data_complete.rds")
x %>% filter(grepl("CDKN", gene))
x %>% filter(grepl("CDKN", gene)) %>% pull(gene_role) %>% table()
x %>% filter(grepl("CDKN", gene)) %>% pull(gene_role) %>% table(useNA = "ifany")
x = readRDS("./data/msk_met_data_fitted.rds")
library(tidyverse)
library(TAPACLOTH)
source("./scripts/library.R")
s = x$sample[1]
## Get which purity should be used (input or tapacloth)
purity_mode = x %>%
filter(sample == s) %>%
pull(purity_selected) %>%
unique()
purity_mode
## Get TAPACLOTH agnostic fit
fit = get_tapacloth_fit(sample = s, purity_mode = purity_mode)
fit
## Run TAPACLOTH informed fit
fit_informed = TAPACLOTH::run_classifier(
x = fit,
cutoff = 0.0,
rho = 0.01,
# karyotypes = ,
gene_role_specific = TRUE,
assign_extremes = TRUE
)
fit_informed
x %>%
mutate(id = paste(chr,from,to,ref,alt,sep = ":")) %>%
filter(sample == s) %>%
full_join(fit_informed$classifier$data %>%
rename(ploidy_informed = ploidy,
multiplicity_informed = multiplicity,
entropy_informed = entropy,
mean_entropy_informed = mean_entropy,
label_informed = label) %>%
select(id, gene_role, ploidy_informed, multiplicity_informed, entropy_informed, mean_entropy_informed, label_informed),
by = "id"
) %>%
full_join(fit$classifier$data %>%
rename(ploidy_agnostic = ploidy,
multiplicity_agnostic = multiplicity,
entropy_agnostic = entropy,
mean_entropy_agnostic = mean_entropy,
label_agnostic = label) %>%
select(id, ploidy_agnostic, multiplicity_agnostic, entropy_agnostic, mean_entropy_agnostic, label_agnostic),
by = "id"
) %>%
select(chr, from, to, ref, alt, gene, gene_role, contains("agnostic"), contains("informed"), everything())
x %>%
mutate(id = paste(chr,from,to,ref,alt,sep = ":")) %>%
filter(sample == s)
x %>%
mutate(id = paste(chr,from,to,ref,alt,sep = ":")) %>%
filter(sample == s) %>%
full_join(fit_informed$classifier$data %>%
rename(ploidy_informed = ploidy,
multiplicity_informed = multiplicity,
entropy_informed = entropy,
mean_entropy_informed = mean_entropy,
label_informed = label) %>%
select(id, gene_role, ploidy_informed, multiplicity_informed, entropy_informed, mean_entropy_informed, label_informed),
by = "id"
)
x %>%
mutate(id = paste(chr,from,to,ref,alt,sep = ":")) %>%
filter(sample == s) %>%
full_join(fit_informed$classifier$data %>%
rename(ploidy_informed = ploidy,
multiplicity_informed = multiplicity,
entropy_informed = entropy,
mean_entropy_informed = mean_entropy,
label_informed = label) %>%
select(id, gene_role, ploidy_informed, multiplicity_informed, entropy_informed, mean_entropy_informed, label_informed),
by = "id"
) %>%
full_join(fit$classifier$data %>%
rename(ploidy_agnostic = ploidy,
multiplicity_agnostic = multiplicity,
entropy_agnostic = entropy,
mean_entropy_agnostic = mean_entropy,
label_agnostic = label)
fit$classifier$data %>%
rename(ploidy_agnostic = ploidy,
multiplicity_agnostic = multiplicity,
entropy_agnostic = entropy,
mean_entropy_agnostic = mean_entropy,
label_agnostic = label)
fit$classifier$data %>%
rename(ploidy_agnostic = ploidy,
multiplicity_agnostic = multiplicity,
entropy_agnostic = entropy,
mean_entropy_agnostic = mean_entropy,
label_agnostic = label) %>%
select(id, ploidy_agnostic, multiplicity_agnostic, entropy_agnostic, mean_entropy_agnostic, label_agnostic)
fit_informed$classifier$data %>%
rename(ploidy_informed = ploidy,
multiplicity_informed = multiplicity,
entropy_informed = entropy,
mean_entropy_informed = mean_entropy,
label_informed = label)
fit_informed$classifier$data %>%
rename(ploidy_informed = ploidy,
multiplicity_informed = multiplicity,
entropy_informed = entropy,
mean_entropy_informed = mean_entropy,
label_informed = label) %>%
select(id, gene_role, ploidy_informed, multiplicity_informed, entropy_informed, mean_entropy_informed, label_informed)
x %>%
mutate(id = paste(chr,from,to,ref,alt,sep = ":")) %>%
filter(sample == s) %>%
full_join(fit_informed$classifier$data %>%
rename(ploidy_informed = ploidy,
multiplicity_informed = multiplicity,
entropy_informed = entropy,
mean_entropy_informed = mean_entropy,
label_informed = label) %>%
select(id, gene_role, ploidy_informed, multiplicity_informed, entropy_informed, mean_entropy_informed, label_informed),
by = "id"
) %>%
full_join(fit$classifier$data %>%
rename(ploidy_agnostic = ploidy,
multiplicity_agnostic = multiplicity,
entropy_agnostic = entropy,
mean_entropy_agnostic = mean_entropy,
label_agnostic = label) %>%
select(id, ploidy_agnostic, multiplicity_agnostic, entropy_agnostic, mean_entropy_agnostic, label_agnostic),
by = "id"
)
x %>%
mutate(id = paste(chr,from,to,ref,alt,sep = ":")) %>%
filter(sample == s) %>%
full_join(fit_informed$classifier$data %>%
rename(ploidy_informed = ploidy,
multiplicity_informed = multiplicity,
entropy_informed = entropy,
mean_entropy_informed = mean_entropy,
label_informed = label) %>%
select(id, gene_role, ploidy_informed, multiplicity_informed, entropy_informed, mean_entropy_informed, label_informed),
by = "id"
) %>%
full_join(fit$classifier$data %>%
rename(ploidy_agnostic = ploidy,
multiplicity_agnostic = multiplicity,
entropy_agnostic = entropy,
mean_entropy_agnostic = mean_entropy,
label_agnostic = label) %>%
select(id, ploidy_agnostic, multiplicity_agnostic, entropy_agnostic, mean_entropy_agnostic, label_agnostic),
by = "id"
) %>% View()
fit$classifier$data %>%
rename(ploidy_agnostic = ploidy,
multiplicity_agnostic = multiplicity,
entropy_agnostic = entropy,
mean_entropy_agnostic = mean_entropy,
label_agnostic = label) %>%
select(id, ploidy_agnostic, multiplicity_agnostic, entropy_agnostic, mean_entropy_agnostic, label_agnostic)
x %>%
mutate(id = paste(chr,from,to,ref,alt,sep = ":")) %>%
filter(sample == s) %>%
full_join(fit_informed$classifier$data %>%
rename(ploidy_informed = ploidy,
multiplicity_informed = multiplicity,
entropy_informed = entropy,
mean_entropy_informed = mean_entropy,
label_informed = label) %>%
select(id, gene_role, ploidy_informed, multiplicity_informed, entropy_informed, mean_entropy_informed, label_informed),
by = "id"
)
x = readRDS("./data/msk_met_data_fitted.rds")
library(tidyverse)
library(TAPACLOTH)
source("./scripts/library.R")
source("~/.active-rstudio-document", echo=TRUE)
x = x %>%
filter(grepl("CDKN2A", gene)) %>%
select(sample, gene, gene_role, starts_with("label"), starts_with("purity"), starts_with("entropy"))
x = readRDS("./data/msk_met_data_fitted.rds")
x %>%
filter(grepl("CDKN2A", gene)) %>%
select(sample, gene, gene_role, starts_with("label"), starts_with("purity"), starts_with("entropy"))
x %>%
filter(grepl("CDKN2A", gene)) %>%
select(sample, gene, gene_role, starts_with("label"), starts_with("purity"), starts_with("entropy")) %>% pull(gene) %>% table()
x %>%
filter(grepl("CDKN2A", gene)) %>%
select(sample, gene, gene_role, starts_with("label"), starts_with("purity"), starts_with("entropy")) %>% pull(c(gene, gene_role)) %>% table()
x %>%
filter(grepl("CDKN2A", gene)) %>%
select(sample, gene, gene_role, starts_with("label"), starts_with("purity"), starts_with("entropy")) %>% pull(gene) %>% table()
x %>%
filter(grepl("CDKN2A", gene)) %>%
select(sample, gene, gene_role, starts_with("label"), starts_with("purity"), starts_with("entropy")) %>% pull(gene) %>% table(useNA = "ifany")
x = x %>%
filter(grepl("CDKN2A", gene))
x$sample %>% unique()
s = x$sample[1]
x %>%
filter(sample == s)
x %>%
filter(grepl("CDKN2A", gene)) %>%
group_by(sample) %>
x %>%
filter(grepl("CDKN2A", gene)) %>%
group_by(sample) %>%
summarise(n=n())
x %>%
filter(grepl("CDKN2A", gene)) %>%
group_by(sample) %>%
summarise(n=n())Marrange(desc(n))
x %>%
filter(grepl("CDKN2A", gene)) %>%
group_by(sample) %>%
summarise(n=n()) %>% arrange(desc(n))
s = "P-0029156-T01-IM6"
x %>%
filter(sample == s)
x %>%
filter(sample == s) %>% unique()
x %>%
filter(sample == s) %>% unique() %>% View()
x %>%
filter(grepl("CDKN2A", gene)) %>%
mutate(gene = "CDKN2A")
x %>%
filter(grepl("CDKN2A", gene)) %>%
mutate(gene = "CDKN2A") %>%
unique()
x %>%
filter(grepl("CDKN2A", gene)) %>%
mutate(gene = "CDKN2A") %>%
unique() %>% filter(sample==s)
data = read_tsv("./data/msk_met_2021/data_mutations.txt")
metadata = read_tsv("./data/msk_met_2021/data_clinical_sample.txt", comment = "#")
data = data %>%
dplyr::rename(sample = Tumor_Sample_Barcode) %>%
dplyr::select(sample, everything())
data = data %>% unique() ## discard doubled rows
data
data = read_tsv("./data/msk_met_2021/data_mutations.txt")
data = data %>%
dplyr::rename(sample = Tumor_Sample_Barcode) %>%
dplyr::select(sample, everything())
data = read_tsv("./data/msk_met_2021/data_mutations.txt")
problems()
data[4588,]
data[4588,]$Hugo_Symbol
data %>% head() %>% View()
metadata = read_tsv("./data/msk_met_2021/data_clinical_sample.txt", comment = "#")
data$Hugo_Symbol %>% table() %>% sort()
data %>% filter(grepl("CDK2NA", Hugo_Symbol))
data %>% filter(grepl("CDKN2A", Hugo_Symbol))
data %>% filter(grepl("CDKN2A", Hugo_Symbol)) %>% head(100) %>% View()
data %>% filter(grepl("CDKN2Ap", Hugo_Symbol)) %>% head(100) %>% View()
data = data %>%
dplyr::rename(sample = Tumor_Sample_Barcode) %>%
dplyr::select(sample, everything())
data
data %>%
mutate(Hugo_Symbol = ifelse(grepl("CDKN2A",Hugo_Symbol), "CDKN2A", Hugo_Symbol))
data = read_tsv("./data/msk_met_2021/data_mutations.txt")
metadata = read_tsv("./data/msk_met_2021/data_clinical_sample.txt", comment = "#")
data = data %>%
dplyr::rename(sample = Tumor_Sample_Barcode) %>%
dplyr::select(sample, everything())
data = data %>%
mutate(Hugo_Symbol = ifelse(grepl("CDKN2A",Hugo_Symbol), "CDKN2A", Hugo_Symbol)) %>% ## correct for error in parsing CDKN2A lines (AKAs present)
unique() ## discard doubled rows
metadata = metadata %>%
rename(sample = SAMPLE_ID)
data = left_join(data, metadata, by="sample")
data = data %>%
dplyr::rename(
chr = Chromosome,
from = Start_Position,
to = End_Position,
gene = Hugo_Symbol,
NV = t_alt_count,
NR = t_ref_count,
purity = TUMOR_PURITY
) %>%
dplyr::mutate(purity = purity/100) %>%
dplyr::mutate(DP = NV+NR) %>%
dplyr::mutate(VAF = NV/DP) %>%
dplyr::mutate(chr = paste0("chr",chr)) %>%
dplyr::mutate(ref = Reference_Allele, alt = Tumor_Seq_Allele2) %>%
dplyr::select(sample, purity, chr, from, to, ref, alt, gene, NV, DP, VAF, everything())
saveRDS(object = data, file = "./data/msk_met_data.rds")
library(tidyverse)
x = readRDS("./data/msk_met_data.rds")
source("./scripts/library.R")
estimate_purity = function(s){
# Samples with less than 4 mutations will have NA purity_TAPACLOTH and reliability_TAPACLOTH
# Samples with NA purity will have NA reliability_TAPACLOTH but finite purity_TAPACLOTH (if fit gives not 2 peaks)
# Initialize TAPACLOTH object
input = init_tapacloth(x = x, sample = s)
# Estimate purity of samples
input = TAPACLOTH::estimate_purity(x = input,
eps = 1) # choosing closest peak to input purity when best fit has 2 components: filtering can be done a posteriori on reliability
# Save object
saveRDS(object = input, file = paste0("./data/tapacloth_input/",s,".rds"))
# Return a list of purity estimate and error
tibble(sample = s,
purity_TAPACLOTH = ifelse(!is.null(input$purity_estimate$purity), input$purity_estimate$purity, NA),
reliability_TAPACLOTH = ifelse(!is.null(input$purity_estimate$reliability), input$purity_estimate$reliability, NA))
}
setwd("~/cds/guascone/dati_ncalonaci/TAPACLOTH/new/")
setwd("~/cds/guascone/dati_ncalonaci/TAPACLOTH/new/TAPACLOTH/")
setwd("~")
library(stats)
sessionInfo()
stats
?stats
library(tidyverse)
x = readRDS('~/Dropbox/2023.TAPACLOTH/Revisions/Rebuttal/results/TCGA_dataset.rds')
y = readRDS('~/Dropbox/2023.TAPACLOTH/Revisions/Rebuttal/results/HMF_dataset.rds')
z = readRDS('~/Dropbox/2023.TAPACLOTH/Revisions/Rebuttal/results/PCAWG_dataset.rds')
x = x %>% mutate(tumor_type = ifelse(tumor_type %in% c('COAD', 'READ'), 'CRC', tumor_type))
y = y %>%
mutate(tumor_type = ifelse(tumor_type == 'NSCLC', 'LUAD', tumor_type)) %>%
mutate(tumor_type = ifelse(tumor_type == 'MELA', 'MEL', tumor_type)) %>%
mutate(tumor_type = ifelse(tumor_type == 'PAEN', 'PAAD', tumor_type))
x = rbind(
x %>%
select(sample, tumor_type, purity, gene, state, NV, DP, ploidy, multiplicity) %>%
mutate(cohort = 'TCGA'),
y %>%
select(sample, tumor_type, purity, gene, state, NV, DP, ploidy, multiplicity) %>%
mutate(cohort = 'HMF'),
z %>%
select(sample, tumor_type, purity, gene, state, NV, DP, ploidy, multiplicity) %>%
mutate(cohort = 'PCAWG')
)
x = x %>%
left_join(INCOMMON::cancer_gene_census, by = 'gene')
x %>%
filter(ploidy <= 10) %>%
filter(!is.na(multiplicity)) %>%
filter(tumor_type %in% c('BLCA','BRCA','CRC','LUAD','MEL',"PAAD",'PRAD','STAD','OV','UCEC')) %>%
mutate(multiplicity = ifelse(state == 'WT', 0, multiplicity)) %>%
mutate(ploidy = factor(ploidy)) %>%
ggplot()+
geom_bar(aes(x = ploidy, fill = factor(multiplicity)))+
scale_fill_manual(values = c('gainsboro', 'steelblue', 'forestgreen', 'darkorange', 'firebrick2', 'goldenrod1', 'navyblue', 'purple3', 'deeppink2', 'indianred', 'deepskyblue', 'green3'))+
facet_grid(~cohort~tumor_type, scales = 'free')+
CNAqc:::my_ggplot_theme()
plot = x %>%
group_by(ploidy, state) %>%
reframe(n = n()) %>%
mutate(state = ifelse(state == 'WT', 'WT sites', 'Mutant sites')) %>%
ggplot(aes(x = ploidy, y = log10(n), group = state, color = state))+
geom_hline(yintercept = log10(100), linetype = 'longdash', color = 'forestgreen')+
geom_vline(xintercept = 8, linetype = 'longdash', color = 'forestgreen')+
geom_line()+
geom_point()+
scale_x_continuous(breaks = seq(0,50,2), limits = c(1,50))+
scale_y_continuous(labels = scales::math_format(10^.x))+
scale_color_manual(values = c('darkgrey', 'indianred') %>% rev())+
CNAqc:::my_ggplot_theme()+
labs(x = 'Total CN (k)', y = 'Number of sites (log10)', title = 'Incidence of k values (benchmark dataset)')+
guides(color = guide_legend(title = ''))
plot
x %>% select(ploidy)
x %>% filter(state == 'Mutant') %>% select(ploidy)
x %>% filter(state == 'mutant') %>% select(ploidy)
x %>% filter(state == 'mutant') %>% select(ploidy) %>% mutate(high = (ploidy > 8))
x %>% filter(state == 'mutant') %>% select(ploidy) %>% mutate(high = (ploidy > 8)) %>% group_by(high) %>% reframe(n=n())
434/434
434/171030
x %>% filter(state == 'mutant') %>% select(ploidy) %>% mutate(high = (ploidy >= 100)) %>% group_by(high) %>% reframe(n=n())
2/(171462+2)
(2/(171462+2))*100
434/(171030+434)
179.82+30
setwd('~/Documents/GitHub/chordR/')
usethis::use_testthat()        # Set up testing infrastructure
usethis::use_roxygen_md()      # Use Markdown in roxygen2 docs
usethis::use_package_doc()     # Create a package-level documentation file
usethis::create_package()
usethis::create_package('./')
usethis::create_package('./')
